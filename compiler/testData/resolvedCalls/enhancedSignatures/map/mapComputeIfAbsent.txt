fun valuesNotNull(map: MutableMap<Int, String>) {
    map.computeIfAbsent(1) { k -> null }
        // SUCCESS
        // ORIGINAL:    fun <K, V> MutableMap<K, V>.computeIfAbsent(K, (K) -> V?): V?
        // SUBSTITUTED: fun <K, V> MutableMap<Int, String>.computeIfAbsent(Int, (Int) -> String?): String?
}

fun valuesNullable(map: MutableMap<Int, String?>) {
    map.computeIfAbsent(1) { k -> null }
        // SUCCESS
        // ORIGINAL:    fun <K, V> MutableMap<K, V>.computeIfAbsent(K, (K) -> V?): V?
        // SUBSTITUTED: fun <K, V> MutableMap<Int, String?>.computeIfAbsent(Int, (Int) -> String?): String?
}

fun <T> valuesT(map: MutableMap<Int, T>, newValue: T) {
    map.computeIfAbsent(1) { k -> null }
        // SUCCESS
        // ORIGINAL:    fun <K, V> MutableMap<K, V>.computeIfAbsent(K, (K) -> V?): V?
        // SUBSTITUTED: fun <K, V> MutableMap<Int, T>.computeIfAbsent(Int, (Int) -> T?): T?
}

fun <T : Any> valuesTNotNull(map: MutableMap<Int, T>, newValue: T) {
    map.computeIfAbsent(1) { k -> null }
        // SUCCESS
        // ORIGINAL:    fun <K, V> MutableMap<K, V>.computeIfAbsent(K, (K) -> V?): V?
        // SUBSTITUTED: fun <K, V> MutableMap<Int, T>.computeIfAbsent(Int, (Int) -> T?): T?
}

fun <T : Any> valuesTNullable(map: MutableMap<Int, T?>, newValue: T?) {
    map.computeIfAbsent(1) { k -> null }
        // SUCCESS
        // ORIGINAL:    fun <K, V> MutableMap<K, V>.computeIfAbsent(K, (K) -> V?): V?
        // SUBSTITUTED: fun <K, V> MutableMap<Int, T?>.computeIfAbsent(Int, (Int) -> T?): T?
}
