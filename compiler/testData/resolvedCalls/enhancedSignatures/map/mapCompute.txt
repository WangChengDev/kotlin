fun valuesNotNull(map: MutableMap<Int, String>) {
    map.compute(1) { k, v -> null }
        // SUCCESS
        // ORIGINAL:    fun <K, V> MutableMap<K, V>.compute(K, (K, V?) -> V?): V?
        // SUBSTITUTED: fun <K, V> MutableMap<Int, String>.compute(Int, (Int, String?) -> String?): String?
}

fun valuesNullable(map: MutableMap<Int, String?>) {
    map.compute(1) { k, v -> v?.let { it + k } }
        // SUCCESS
        // ORIGINAL:    fun <K, V> MutableMap<K, V>.compute(K, (K, V?) -> V?): V?
        // SUBSTITUTED: fun <K, V> MutableMap<Int, String?>.compute(Int, (Int, String?) -> String?): String?
}

fun <T> valuesT(map: MutableMap<Int, T>, newValue: T) {
    map.compute(1) { k, v -> null }
        // SUCCESS
        // ORIGINAL:    fun <K, V> MutableMap<K, V>.compute(K, (K, V?) -> V?): V?
        // SUBSTITUTED: fun <K, V> MutableMap<Int, T>.compute(Int, (Int, T?) -> T?): T?
}

fun <T : Any> valuesTNotNull(map: MutableMap<Int, T>, newValue: T) {
    map.compute(1) { k, v -> null }
        // SUCCESS
        // ORIGINAL:    fun <K, V> MutableMap<K, V>.compute(K, (K, V?) -> V?): V?
        // SUBSTITUTED: fun <K, V> MutableMap<Int, T>.compute(Int, (Int, T?) -> T?): T?
}

fun <T : Any> valuesTNullable(map: MutableMap<Int, T?>, newValue: T?) {
    map.compute(1) { k, v -> null }
        // SUCCESS
        // ORIGINAL:    fun <K, V> MutableMap<K, V>.compute(K, (K, V?) -> V?): V?
        // SUBSTITUTED: fun <K, V> MutableMap<Int, T?>.compute(Int, (Int, T?) -> T?): T?
}
